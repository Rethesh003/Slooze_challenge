# ============================

# ----------------------------
# 6️⃣ EOQ & Reorder Point
# ----------------------------
inventory['AnnualDemand'] = inventory['SalesValue']  # approximation
S = 50  # ordering cost per order
H = 10  # holding cost per unit

inventory['EOQ'] = np.sqrt((2 * inventory['AnnualDemand'] * S)/H)

# Lead time example for Reorder Point
z = 1.65  # 95% service level
inventory['DailyDemand'] = inventory['AnnualDemand']/365
inventory['StdDevDailyDemand'] = inventory['DailyDemand']*0.1  # approximate
inventory['SafetyStock'] = z * inventory['StdDevDailyDemand'] * np.sqrt(7)  # 7-day lead time example
inventory['ReorderPoint'] = (inventory['DailyDemand']*7) + inventory['SafetyStock']

inventory.to_csv("Inventory_EOQ_Reorder.csv", index=False)

# ----------------------------
# 7️⃣ Lead Time Analysis
# ----------------------------
purchases_df = dfs['purchases'].copy()
purchases_df['ReceivingDate'] = pd.to_datetime(purchases_df['ReceivingDate'], errors='coerce')
purchases_df['PODate'] = pd.to_datetime(purchases_df['PODate'], errors='coerce')
purchases_df['LeadTime'] = (purchases_df['ReceivingDate'] - purchases_df['PODate']).dt.days

vendor_lead_time = purchases_df.groupby('VendorName')['LeadTime'].mean().reset_index().sort_values('LeadTime', ascending=False)

plt.figure(figsize=(12,6))
sns.barplot(data=vendor_lead_time.head(10), x='LeadTime', y='VendorName', palette='magma')
plt.title("Top 10 Vendors by Average Lead Time")
plt.xlabel("Average Lead Time (days)")
plt.ylabel("Vendor")
plt.show()

vendor_lead_time.to_csv("Vendor_LeadTime.csv", index=False)

# ----------------------------
# 8️⃣ Top Products by Sales Dollars
# ----------------------------
top_products = sales_df.groupby(['Brand', 'Description'])['SalesDollars'].sum().sort_values(ascending=False).head(10)
top_products = top_products.reset_index()
top_products['Product'] = top_products['Brand'].astype(str) + " - " + top_products['Description'].astype(str)

plt.figure(figsize=(12,6))
sns.barplot(data=top_products, x='SalesDollars', y='Product', palette='viridis')
plt.title("Top 10 Products by Sales Dollars", fontsize=16)
plt.xlabel("Sales Dollars", fontsize=12)
plt.ylabel("Product", fontsize=12)
plt.show()

top_products.to_csv("Top_Products_Sales.csv", index=False)

# ----------------------------
# 9️⃣ Seasonal Peaks per Store/Product
# ----------------------------
sales_df['Month'] = sales_df['SalesDate'].dt.to_period('M')
sales_df['Product'] = sales_df['Brand'].astype(str) + " - " + sales_df['Description'].astype(str)

monthly_sales_ps = sales_df.groupby(['Store','Product','Month'])['SalesDollars'].sum().reset_index()
monthly_sales_ps['Month'] = monthly_sales_ps['Month'].dt.to_timestamp()
monthly_sales_ps['MA_3'] = monthly_sales_ps.groupby(['Store','Product'])['SalesDollars'].transform(lambda x: x.rolling(3, min_periods=1).mean())

# Seasonal peaks: Sales > mean + 1 std deviation
monthly_sales_ps['Mean'] = monthly_sales_ps.groupby(['Store','Product'])['SalesDollars'].transform('mean')
monthly_sales_ps['Std'] = monthly_sales_ps.groupby(['Store','Product'])['SalesDollars'].transform('std')
monthly_sales_ps['SeasonalPeak'] = monthly_sales_ps['SalesDollars'] > (monthly_sales_ps['Mean'] + monthly_sales_ps['Std'])

peaks = monthly_sales_ps[monthly_sales_ps['SeasonalPeak']].sort_values(['Store','Product','Month'])
peaks.to_csv("Seasonal_Peaks.csv", index=False)
display(peaks.head(20))

